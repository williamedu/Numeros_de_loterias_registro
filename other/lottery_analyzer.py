import json
import pandas as pd
from datetime import datetime, timedelta
from collections import Counter, defaultdict
import statistics
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns

class LotteryPatternAnalyzer:
    def __init__(self, json_file_path):
        """Inicializar el analizador con los datos del archivo JSON"""
        self.json_file_path = json_file_path
        self.data = None
        self.historical_draws = []
        self.load_data()
        self.prepare_historical_data()
    
    def load_data(self):
        """Cargar datos desde el archivo JSON"""
        try:
            with open(self.json_file_path, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            print(f"‚úÖ Datos cargados exitosamente")
            print(f"üìä Loter√≠a: {self.data.get('lotteryName', 'N/A')}")
            print(f"üìÖ √öltima actualizaci√≥n: {self.data.get('lastUpdated', 'N/A')}")
            print(f"üî¢ Total de n√∫meros procesados: {self.data.get('totalProcessed', 'N/A')}")
        except Exception as e:
            print(f"‚ùå Error cargando datos: {e}")
            return False
        return True
    
    def prepare_historical_data(self):
        """Preparar datos hist√≥ricos para an√°lisis"""
        if not self.data or 'numbers' not in self.data:
            return
        
        # Extraer todos los sorteos del historial
        all_draws = []
        for number, number_data in self.data['numbers'].items():
            if 'history' in number_data and number_data['history']:
                for draw in number_data['history']:
                    all_draws.append({
                        'date': draw['date'],
                        'number': number,
                        'position': draw['position'],
                        'daysAgo': draw['daysAgo']
                    })
        
        # Agrupar por fecha para reconstruir sorteos completos
        draws_by_date = defaultdict(list)
        for draw in all_draws:
            draws_by_date[draw['date']].append(draw)
        
        # Crear lista de sorteos completos
        for date, numbers in draws_by_date.items():
            if len(numbers) == 3:  # Pega 3 tiene 3 posiciones
                sorted_numbers = sorted(numbers, key=lambda x: x['position'])
                self.historical_draws.append({
                    'date': date,
                    'numbers': [n['number'] for n in sorted_numbers],
                    'daysAgo': sorted_numbers[0]['daysAgo']
                })
        
        # Ordenar por fecha (m√°s reciente primero)
        self.historical_draws.sort(key=lambda x: datetime.strptime(x['date'], '%d-%m-%Y'), reverse=True)
        print(f"üìà Sorteos hist√≥ricos preparados: {len(self.historical_draws)} sorteos completos")

    def analyze_frequency_patterns(self):
        """An√°lisis 1: Patrones de Frecuencia"""
        print("\n" + "="*60)
        print("üîç AN√ÅLISIS 1: PATRONES DE FRECUENCIA")
        print("="*60)
        
        if not self.data or 'numbers' not in self.data:
            print("‚ùå No hay datos disponibles")
            return {}
        
        # Contar frecuencias totales
        frequencies = {}
        total_appearances = 0
        
        for number, data in self.data['numbers'].items():
            total_freq = sum(data['positions'].values()) if 'positions' in data else 0
            frequencies[number] = total_freq
            total_appearances += total_freq
        
        # N√∫meros m√°s y menos frecuentes
        sorted_freq = sorted(frequencies.items(), key=lambda x: x[1], reverse=True)
        
        print(f"üìä Total de apariciones analizadas: {total_appearances}")
        print(f"üìä Promedio de apariciones por n√∫mero: {total_appearances/100:.2f}")
        
        print("\nüî• TOP 10 N√öMEROS M√ÅS FRECUENTES:")
        for i, (number, freq) in enumerate(sorted_freq[:10], 1):
            percentage = (freq / total_appearances * 100) if total_appearances > 0 else 0
            print(f"{i:2d}. N√∫mero {number}: {freq:3d} veces ({percentage:.2f}%)")
        
        print("\nüßä TOP 10 N√öMEROS MENOS FRECUENTES:")
        for i, (number, freq) in enumerate(sorted_freq[-10:], 1):
            percentage = (freq / total_appearances * 100) if total_appearances > 0 else 0
            print(f"{i:2d}. N√∫mero {number}: {freq:3d} veces ({percentage:.2f}%)")
        
        # An√°lisis estad√≠stico de frecuencias
        freq_values = list(frequencies.values())
        if freq_values:
            mean_freq = statistics.mean(freq_values)
            std_freq = statistics.stdev(freq_values) if len(freq_values) > 1 else 0
            
            print(f"\nüìà ESTAD√çSTICAS DE FRECUENCIA:")
            print(f"   Media: {mean_freq:.2f}")
            print(f"   Desviaci√≥n est√°ndar: {std_freq:.2f}")
            print(f"   Coeficiente de variaci√≥n: {(std_freq/mean_freq)*100:.2f}%")
            
            # Test de uniformidad (Chi-cuadrado)
            expected_freq = total_appearances / 100
            chi_stat = sum((freq - expected_freq)**2 / expected_freq for freq in freq_values)
            chi_critical = 123.225  # Chi-cuadrado cr√≠tico para 99 grados de libertad al 95%
            
            print(f"   Chi-cuadrado calculado: {chi_stat:.2f}")
            print(f"   Chi-cuadrado cr√≠tico (95%): {chi_critical:.2f}")
            print(f"   ¬øDistribuci√≥n uniforme?: {'‚ùå NO' if chi_stat > chi_critical else '‚úÖ S√ç'}")
        
        return {
            'frequencies': frequencies,
            'most_frequent': sorted_freq[:10],
            'least_frequent': sorted_freq[-10:],
            'total_appearances': total_appearances,
            'uniformity_test': chi_stat > chi_critical if 'chi_stat' in locals() else None
        }

    def analyze_hot_cold_patterns(self):
        """An√°lisis 2: N√∫meros Calientes vs Fr√≠os"""
        print("\n" + "="*60)
        print("üå°Ô∏è  AN√ÅLISIS 2: N√öMEROS CALIENTES VS FR√çOS")
        print("="*60)
        
        if not self.data or 'numbers' not in self.data:
            return {}
        
        # Obtener n√∫meros con sus d√≠as sin salir
        hot_cold_data = []
        for number, data in self.data['numbers'].items():
            if data.get('daysSinceSeen') is not None:
                hot_cold_data.append({
                    'number': number,
                    'days_since': data['daysSinceSeen'],
                    'last_seen': data.get('lastSeen', 'N/A')
                })
        
        if not hot_cold_data:
            print("‚ùå No hay datos de √∫ltimas apariciones")
            return {}
        
        # Ordenar por d√≠as sin salir
        hot_cold_data.sort(key=lambda x: x['days_since'])
        
        print("üî• TOP 10 N√öMEROS M√ÅS CALIENTES (salieron recientemente):")
        for i, item in enumerate(hot_cold_data[:10], 1):
            print(f"{i:2d}. N√∫mero {item['number']}: {item['days_since']} d√≠as (√∫ltimo: {item['last_seen']})")
        
        print("\nüßä TOP 10 N√öMEROS M√ÅS FR√çOS (no salen hace tiempo):")
        for i, item in enumerate(hot_cold_data[-10:], 1):
            print(f"{i:2d}. N√∫mero {item['number']}: {item['days_since']} d√≠as (√∫ltimo: {item['last_seen']})")
        
        # Estad√≠sticas de d√≠as sin salir
        days_values = [item['days_since'] for item in hot_cold_data]
        print(f"\nüìä ESTAD√çSTICAS DE D√çAS SIN SALIR:")
        print(f"   Promedio: {statistics.mean(days_values):.1f} d√≠as")
        print(f"   Mediana: {statistics.median(days_values):.1f} d√≠as")
        print(f"   M√≠nimo: {min(days_values)} d√≠as")
        print(f"   M√°ximo: {max(days_values)} d√≠as")
        
        return {
            'hot_numbers': hot_cold_data[:10],
            'cold_numbers': hot_cold_data[-10:],
            'stats': {
                'mean_days': statistics.mean(days_values),
                'median_days': statistics.median(days_values),
                'min_days': min(days_values),
                'max_days': max(days_values)
            }
        }

    def analyze_position_patterns(self):
        """An√°lisis 3: Patrones por Posici√≥n"""
        print("\n" + "="*60)
        print("üìç AN√ÅLISIS 3: PATRONES POR POSICI√ìN")
        print("="*60)
        
        if not self.data or 'numbers' not in self.data:
            return {}
        
        positions = ['first', 'second', 'third']
        position_names = ['Primera', 'Segunda', 'Tercera']
        
        for i, (pos_key, pos_name) in enumerate(zip(positions, position_names)):
            print(f"\nüéØ {pos_name.upper()} POSICI√ìN:")
            
            # Obtener frecuencias para esta posici√≥n
            pos_frequencies = []
            for number, data in self.data['numbers'].items():
                if 'positions' in data and pos_key in data['positions']:
                    freq = data['positions'][pos_key]
                    if freq > 0:
                        pos_frequencies.append((number, freq))
            
            if pos_frequencies:
                pos_frequencies.sort(key=lambda x: x[1], reverse=True)
                
                print(f"   Top 5 n√∫meros m√°s frecuentes:")
                for j, (number, freq) in enumerate(pos_frequencies[:5], 1):
                    total_pos_appearances = sum(f for _, f in pos_frequencies)
                    percentage = (freq / total_pos_appearances * 100) if total_pos_appearances > 0 else 0
                    print(f"   {j}. N√∫mero {number}: {freq} veces ({percentage:.2f}%)")
                
                # Estad√≠sticas por posici√≥n
                freq_values = [f for _, f in pos_frequencies]
                print(f"   Total apariciones: {sum(freq_values)}")
                print(f"   Promedio por n√∫mero activo: {statistics.mean(freq_values):.2f}")
                print(f"   N√∫meros que aparecieron: {len(pos_frequencies)}")
        
        return {'position_analysis': 'completed'}

    def analyze_consecutive_patterns(self):
        """An√°lisis 4: N√∫meros Consecutivos"""
        print("\n" + "="*60)
        print("üîó AN√ÅLISIS 4: PATRONES DE N√öMEROS CONSECUTIVOS")
        print("="*60)
        
        if not self.historical_draws:
            print("‚ùå No hay datos de sorteos hist√≥ricos")
            return {}
        
        consecutive_counts = {
            'two_consecutive': 0,
            'three_consecutive': 0,
            'total_draws': len(self.historical_draws)
        }
        
        consecutive_examples = []
        
        for draw in self.historical_draws:
            numbers = [int(n) for n in draw['numbers']]
            numbers.sort()
            
            # Verificar consecutivos
            has_two_consecutive = False
            has_three_consecutive = False
            
            # Verificar pares consecutivos
            for i in range(len(numbers) - 1):
                if numbers[i+1] - numbers[i] == 1:
                    has_two_consecutive = True
                    break
            
            # Verificar tres consecutivos
            if len(numbers) == 3:
                numbers.sort()
                if (numbers[1] - numbers[0] == 1) and (numbers[2] - numbers[1] == 1):
                    has_three_consecutive = True
                    consecutive_examples.append({
                        'date': draw['date'],
                        'numbers': draw['numbers'],
                        'type': 'three_consecutive'
                    })
            
            if has_two_consecutive:
                consecutive_counts['two_consecutive'] += 1
            if has_three_consecutive:
                consecutive_counts['three_consecutive'] += 1
        
        # Calcular porcentajes
        total = consecutive_counts['total_draws']
        two_consecutive_pct = (consecutive_counts['two_consecutive'] / total * 100) if total > 0 else 0
        three_consecutive_pct = (consecutive_counts['three_consecutive'] / total * 100) if total > 0 else 0
        
        print(f"üìä ESTAD√çSTICAS DE N√öMEROS CONSECUTIVOS:")
        print(f"   Total de sorteos analizados: {total}")
        print(f"   Sorteos con al menos 2 n√∫meros consecutivos: {consecutive_counts['two_consecutive']} ({two_consecutive_pct:.2f}%)")
        print(f"   Sorteos con 3 n√∫meros consecutivos: {consecutive_counts['three_consecutive']} ({three_consecutive_pct:.2f}%)")
        
        if consecutive_examples:
            print(f"\nüéØ EJEMPLOS DE 3 N√öMEROS CONSECUTIVOS:")
            for example in consecutive_examples[:5]:  # Mostrar solo los primeros 5
                print(f"   {example['date']}: {'-'.join(example['numbers'])}")
        
        return consecutive_counts

    def analyze_sum_patterns(self):
        """An√°lisis 5: Patrones de Suma"""
        print("\n" + "="*60)
        print("‚ûï AN√ÅLISIS 5: PATRONES DE SUMA DE N√öMEROS")
        print("="*60)
        
        if not self.historical_draws:
            return {}
        
        sums = []
        for draw in self.historical_draws:
            total_sum = sum(int(n) for n in draw['numbers'])
            sums.append(total_sum)
        
        if not sums:
            print("‚ùå No hay datos de sumas")
            return {}
        
        # Estad√≠sticas de sumas
        mean_sum = statistics.mean(sums)
        median_sum = statistics.median(sums)
        min_sum = min(sums)
        max_sum = max(sums)
        std_sum = statistics.stdev(sums) if len(sums) > 1 else 0
        
        print(f"üìä ESTAD√çSTICAS DE SUMAS:")
        print(f"   Suma promedio: {mean_sum:.2f}")
        print(f"   Suma mediana: {median_sum:.1f}")
        print(f"   Suma m√≠nima: {min_sum}")
        print(f"   Suma m√°xima: {max_sum}")
        print(f"   Desviaci√≥n est√°ndar: {std_sum:.2f}")
        
        # Distribuci√≥n de sumas
        sum_counter = Counter(sums)
        most_common_sums = sum_counter.most_common(10)
        
        print(f"\nüéØ SUMAS M√ÅS FRECUENTES:")
        for i, (sum_val, count) in enumerate(most_common_sums, 1):
            percentage = (count / len(sums) * 100)
            print(f"   {i:2d}. Suma {sum_val}: {count} veces ({percentage:.2f}%)")
        
        return {
            'sum_stats': {
                'mean': mean_sum,
                'median': median_sum,
                'min': min_sum,
                'max': max_sum,
                'std': std_sum
            },
            'most_common_sums': most_common_sums
        }

    def analyze_gap_patterns(self):
        """An√°lisis 6: Patrones de Intervalos (Gaps)"""
        print("\n" + "="*60)
        print("üìè AN√ÅLISIS 6: PATRONES DE INTERVALOS ENTRE N√öMEROS")
        print("="*60)
        
        if not self.historical_draws:
            return {}
        
        gaps = []
        for draw in self.historical_draws:
            numbers = sorted([int(n) for n in draw['numbers']])
            # Calcular intervalos entre n√∫meros consecutivos ordenados
            draw_gaps = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]
            gaps.extend(draw_gaps)
        
        if not gaps:
            return {}
        
        # Estad√≠sticas de intervalos
        mean_gap = statistics.mean(gaps)
        median_gap = statistics.median(gaps)
        
        print(f"üìä ESTAD√çSTICAS DE INTERVALOS:")
        print(f"   Intervalo promedio: {mean_gap:.2f}")
        print(f"   Intervalo mediana: {median_gap:.1f}")
        print(f"   Intervalo m√≠nimo: {min(gaps)}")
        print(f"   Intervalo m√°ximo: {max(gaps)}")
        
        # Intervalos m√°s comunes
        gap_counter = Counter(gaps)
        most_common_gaps = gap_counter.most_common(10)
        
        print(f"\nüéØ INTERVALOS M√ÅS FRECUENTES:")
        for i, (gap, count) in enumerate(most_common_gaps, 1):
            percentage = (count / len(gaps) * 100)
            print(f"   {i:2d}. Intervalo {gap}: {count} veces ({percentage:.2f}%)")
        
        return {
            'gap_stats': {
                'mean': mean_gap,
                'median': median_gap,
                'min': min(gaps),
                'max': max(gaps)
            },
            'most_common_gaps': most_common_gaps
        }

    def analyze_repetition_patterns(self):
        """An√°lisis 7: Patrones de Repetici√≥n Reciente"""
        print("\n" + "="*60)
        print("üîÑ AN√ÅLISIS 7: PATRONES DE REPETICI√ìN EN √öLTIMOS 30 D√çAS")
        print("="*60)
        
        if not self.data or 'repeatedInLast30Days' not in self.data:
            print("‚ùå No hay datos de repeticiones recientes")
            return {}
        
        repeated_data = self.data['repeatedInLast30Days']
        
        if not repeated_data:
            print("üìä No hay n√∫meros que se hayan repetido en los √∫ltimos 30 d√≠as")
            return {}
        
        print(f"üìä N√öMEROS REPETIDOS EN √öLTIMOS 30 D√çAS: {len(repeated_data)} n√∫meros")
        
        # Ordenar por n√∫mero de ocurrencias
        sorted_repeated = sorted(repeated_data.items(), key=lambda x: x[1]['occurrences'], reverse=True)
        
        print(f"\nüî• TOP N√öMEROS M√ÅS REPETIDOS:")
        for i, (number, data) in enumerate(sorted_repeated[:10], 1):
            occurrences = data['occurrences']
            dates = data['dates']
            print(f"   {i:2d}. N√∫mero {number}: {occurrences} veces")
            print(f"       Fechas: {', '.join(dates[:3])}{'...' if len(dates) > 3 else ''}")
        
        return {
            'total_repeated': len(repeated_data),
            'most_repeated': sorted_repeated[:10]
        }

    def generate_recommendations(self):
        """Generar recomendaciones basadas en patrones"""
        print("\n" + "="*60)
        print("üí° RECOMENDACIONES Y CONCLUSIONES")
        print("="*60)
        
        print("\nüéØ INTERPRETACI√ìN DE PATRONES:")
        print("   ‚Ä¢ Los patrones mostrados son descriptivos, no predictivos")
        print("   ‚Ä¢ Cada sorteo es independiente de los anteriores")
        print("   ‚Ä¢ Las desviaciones de la uniformidad pueden ser casuales")
        
        print("\n‚ö†Ô∏è  LIMITACIONES DEL AN√ÅLISIS:")
        print("   ‚Ä¢ Los patrones pasados NO garantizan resultados futuros")
        print("   ‚Ä¢ La aleatoriedad verdadera puede producir 'patrones' aparentes")
        print("   ‚Ä¢ Ning√∫n m√©todo puede predecir n√∫meros de loter√≠a con certeza")
        
        print("\nüìä USO RECOMENDADO DE ESTE AN√ÅLISIS:")
        print("   ‚Ä¢ Para entender la distribuci√≥n hist√≥rica de n√∫meros")
        print("   ‚Ä¢ Como referencia estad√≠stica, no como predicci√≥n")
        print("   ‚Ä¢ Para verificar la aleatoriedad del sistema de sorteo")

    def run_complete_analysis(self):
        """Ejecutar an√°lisis completo"""
        print("üé≤ ANALIZADOR DE PATRONES DE LOTER√çA - PEGA 3 M√ÅS")
        print("="*60)
        
        try:
            # Ejecutar todos los an√°lisis
            freq_results = self.analyze_frequency_patterns()
            hot_cold_results = self.analyze_hot_cold_patterns()
            position_results = self.analyze_position_patterns()
            consecutive_results = self.analyze_consecutive_patterns()
            sum_results = self.analyze_sum_patterns()
            gap_results = self.analyze_gap_patterns()
            repetition_results = self.analyze_repetition_patterns()
            
            # Generar recomendaciones
            self.generate_recommendations()
            
            print(f"\n‚úÖ AN√ÅLISIS COMPLETADO EXITOSAMENTE")
            
        except Exception as e:
            print(f"‚ùå Error durante el an√°lisis: {e}")

# Funci√≥n principal
def main():
    # Ruta al archivo JSON
    json_file_path = r"C:\Users\willi\OneDrive\Escritorio\New_Loteria_Resultados\Numeros_de_loterias_registro\json_Datos\lottery_data_Pega_3_Mas.json"
    
    # Crear analizador y ejecutar an√°lisis
    analyzer = LotteryPatternAnalyzer(json_file_path)
    analyzer.run_complete_analysis()

if __name__ == "__main__":
    main()